#! /usr/bin/env ruby

require 'action_view'
require 'action_pack'
require 'hashie'
require 'csv'
require 'srt'
require 'colorize'
require 'sqlite3'
require 'active_record'

ActiveRecord::Base.establish_connection({
  adapter: 'sqlite3',
  database: ':memory:'
})

ActiveRecord::Base.connection.create_table(:categories) do |t|
  t.string :key, null: false
  t.string :title
  t.string :description
end
ActiveRecord::Base.connection.add_index :categories, [:key], unique: true

ActiveRecord::Base.connection.create_table(:contents) do |t|
  t.string :category_key, null: false
  t.string :key, null: false
  t.string :title
  t.string :description
end
ActiveRecord::Base.connection.add_index :contents, [:category_key, :key], unique: true

AppConfig = Hashie::Mash.load('config/app.yaml')

class Category < ActiveRecord::Base

  def title_text
    title
  end

  def description_text
    # TODO: i18n
    if description.blank?
      "このカテゴリでは#{title}について解説します。"
    else
      description
    end
  end

end

class Content < ActiveRecord::Base

  def category
    Category.find_by(key: category_key)
  end

  def video_poster_url
    URI.join(AppConfig.contents_base_url, "#{category_key}/#{key}.png").to_s
  end

  def video_src_url
    URI.join(AppConfig.contents_base_url, "#{category_key}/#{key}.mp4").to_s
  end

  def title_text
    title
  end

  def description_text
    # TODO: i18n
    if description.blank?
      "この動画では#{category.title_text}における#{title}について解説します。"
    else
      description
    end
  end

end

CSV.read("config/#{AppConfig.lang}/categories.csv", headers: true).each do |row|
  params = {
    key: row['key'],
    title: row['title'],
    description: row['description'],
  }.compact
  Category.create!(params)
end

CSV.read("config/#{AppConfig.lang}/contents.csv", headers: true).each do |row|
  params = {
    key: row['key'],
    category_key: row['category_key'],
    title: row['title'],
    description: row['description'],
  }.compact
  Content.create!(params)
end

class View < ActionView::Base

  def initialize(assigns = {})
    paths = ['lib/views']
    lookup_context = ActionView::LookupContext.new(paths)
    super(lookup_context, assigns)
  end

  def compiled_method_container
    self.class
  end

end

class Generator

  def initialize
    @app = Hashie::Mash.load('config/app.yaml')
    @i18n = Hashie::Mash.load("config/#{@app.lang}/locale.yaml")
  end

  def run
    generate_root_page
    generate_category_pages
    generate_content_pages
  end

  def generate_root_page
    STDERR.puts('[Generate Root Page]'.green)
    entry = {
      assigns: {
        i18n: @i18n,
        categories: Category.all,
        root_path: './'
      },
      view: {
        layout: 'layouts/application',
        template: 'root'
      },
      path: 'index.html'
    }
    generate(Hashie::Mash.new(entry))
  end


  def generate_category_pages
    STDERR.puts('[Generate Category Pages]'.green)
    Category.all.each do |category|
      generate_category_page(category)
    end
  end

  def generate_category_page(category)
    entry = {
      assigns: {
        i18n: @i18n,
        category: category,
        contents: Content.where(category_key: category.key),
        root_path: '../',
      },
      view: {
        layout: 'layouts/application',
        prefixes: 'contents',
        template: 'list'
      },
      path: "#{category.key}/index.html"
    }
    generate(Hashie::Mash.new(entry))
  end

  def generate_content_pages
    STDERR.puts('[Generate Content Pages]'.green)
    Content.all.each do |content|
      generate_content_page(content)
    end
  end

  def get_video_track(content)
    return SRT::File.parse(File.new("docs/assets/tracks/#{content.category_key}/#{content.key}.srt"))
  rescue => e
    STDERR.puts(e.message.red)
    return nil
  end

  def generate_content_page(content)
    entry = {
      assigns: {
        i18n: @i18n,
        video_track: get_video_track(content),
        content: content,
        category_url: './',
        root_path: '../',
      },
      view: {
        layout: 'layouts/application',
        prefixes: 'contents',
        template: 'show'
      },
      path: "#{content.category_key}/#{content.key}.html"
    }
    generate(Hashie::Mash.new(entry))
  end

  def generate(entry)
    view = View.new(entry.assigns).render(entry.view)
    output_file_path = Pathname.new(@app.output_dir_path).join(entry.path)
    category_dir_path = output_file_path.dirname
    if !category_dir_path.exist?
      category_dir_path.mkdir
      STDERR.puts("mkdir: #{category_dir_path}".yellow)
    end
    File.open(output_file_path, 'wb') { |io|
      io.puts(view)
    }
    STDERR.puts("generate: #{output_file_path}")
  end

end

Generator.new.run
