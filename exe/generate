#! /usr/bin/env ruby

require 'action_view'
require 'action_pack'
require 'srt'
require 'hashie'

class View < ActionView::Base

  def initialize(assigns = {})
    paths = ['app/views']
    lookup_context = ActionView::LookupContext.new(paths)
    super(lookup_context, assigns)
  end

  def compiled_method_container
    self.class
  end

end

class Generator

  def initialize
    @routes = Hashie::Mash.load('app/routes.yaml')
    @output_dir_path = Pathname.new(__FILE__).join('../../docs')
  end

  def run
    generate(@routes.root)    
  end

  def generate(entry)
    view = View
      .new({
        title: entry.assigns.title,
        subtitle: entry.assigns.subtitle
      }.compact)
      .render({
        layout: entry.view.layout || 'layouts/application',
        prefixes: entry.view.prefixes,
        template: entry.view.template
      }.compact)
    output_file_path = @output_dir_path.join(entry.path)
    File.open(output_file_path, 'wb') { |io|
      io.puts(view)
    }
  end

end

Generator.new.run
return


# require 'pry'
# binding.pry



# output_path = Pathname.new(__FILE__).join('../../docs/sample.html')
# @slug = '001-windows-open-application'
# @srt = SRT::File.parse(File.new(Pathname.new(__FILE__).join("../../docs/assets/videos/#{@slug}.srt")))

# view = View
#   .new(slug: @slug, srt: @srt)
#   .render({
#     layout: 'layouts/application',
#     template: 'show',
#     prefixes: 'contents'})

